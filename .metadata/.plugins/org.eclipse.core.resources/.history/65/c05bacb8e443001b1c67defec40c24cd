package br.com.j.hemopa.digital.bean;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.joda.time.DateTime;
import org.primefaces.event.ScheduleEntryResizeEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultScheduleModel;
import org.primefaces.model.ScheduleEvent;
import org.primefaces.model.ScheduleModel;

import br.com.j.hemopa.digital.model.CustomScheduleEvent;
import br.com.j.hemopa.digital.model.Evento;
import br.com.j.hemopa.digital.model.TipoEvento;
import br.com.j.hemopa.digital.service.EventoDAO;

@Named
@SessionScoped
public class ScheduleBean implements Serializable {

   
	private static final long serialVersionUID = 1L;
	
	private ScheduleModel model;
    private Evento evento;
    private CustomScheduleEvent event;
    private List<ScheduleEvent> scheduleEvents;
    
    @Inject
    private EventoDAO eventoDAO;
    public ScheduleBean() {
        event = new CustomScheduleEvent();
        model = new DefaultScheduleModel();
        evento = new Evento();
    }

    @PostConstruct
    public void init() {
        if (this.model != null) {
            List<Evento> eventos = this.eventoDAO.listaTodos();
            if (this.scheduleEvents == null) {
                this.scheduleEvents = new ArrayList<ScheduleEvent>();
            }
            for (Evento eventoAtual : eventos) {
                ScheduleEvent newEvent = (ScheduleEvent) new CustomScheduleEvent(eventoAtual.getTitulo(), eventoAtual.getDataInicio(), eventoAtual.getDataFim(), eventoAtual.getTipoEvento().getCss(), eventoAtual.isDiaInteiro(), eventoAtual);
                if (!this.scheduleEvents.contains(newEvent)) {
                    newEvent.setId(eventoAtual.getId().toString());
                    this.scheduleEvents.add(newEvent);
                    this.model.addEvent(newEvent);
                }
            }
        }
    }

    public Evento getEvento() {
        return evento;
    }

    public void setEvento(Evento evento) {
        this.evento = evento;
    }

    public void salvar() {
        ScheduleEvent newEvent = new CustomScheduleEvent(this.evento.getTitulo(), this.evento.getDataInicio(), this.evento.getDataFim(), this.evento.getTipoEvento().getCss(), this.evento.isDiaInteiro(), this.evento);
        if (evento.getId() == null) {
            model.addEvent(newEvent);
        } else {
            newEvent.setId(event.getId());
            model.updateEvent(newEvent);
        }
        eventoDAO.adiciona(evento);
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Evento Salvo", "Evento Salvo");
        addMessage(message);
    }

    public void remover() {
        model.deleteEvent(event);
        eventoDAO.remove(evento);
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Evento Removido", "Evento Removido");
        addMessage(message);
    }

    public void onDateSelect(SelectEvent selectEvent) {
        this.evento = new Evento();
        Date dataSelecionada = (Date) selectEvent.getObject();
        DateTime dataSelecionadaJoda = new DateTime(dataSelecionada.getTime());
        this.evento.setDataInicio(dataSelecionada);
        this.evento.setDataFim(dataSelecionadaJoda.plusHours(1).toDate());
    }

    public void onEventSelect(SelectEvent selectEvent) {
        event = (CustomScheduleEvent) selectEvent.getObject();
        this.evento = (Evento) event.getData();
    }

    public void onEventResize(ScheduleEntryResizeEvent event) {
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Evento Redimensionado", "Dia:" + event.getDayDelta() + ", Hor√°rio:" + event.getMinuteDelta());
        addMessage(message);
    }

    private void addMessage(FacesMessage message) {
        FacesContext.getCurrentInstance().addMessage(null, message);
    }

    public TipoEvento[] getTiposEventos() {
        return TipoEvento.values();
    }
}