package br.com.j.hemopa.digital.repository;

import java.io.Serializable;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.TypedQuery;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import br.com.j.hemopa.digital.model.Agenda;
import br.com.j.hemopa.digital.model.Pessoa;
import br.com.j.hemopa.digital.repository.filter.PessoaFilter;

public class Agendamentos implements Serializable {

	private static final long serialVersionUID = 1L;

	@Inject
	private EntityManager manager;

	public Agendamentos() {

	}

	public Agendamentos(EntityManager manager) {
		this.manager = manager;
	}

	public Agenda porId(Long id) {
		return manager.find(Agenda.class, id);
	}

	public List<Agenda> pesquisar(String tipoEvento) {
		String jpql = " from Agenda where  like : tipoEvento ";

		TypedQuery<Agenda> query = manager.createQuery(jpql, Agenda.class);

		query.setParameter("tipoEvento", tipoEvento + "%");

		return query.getResultList();
	}

	public Pessoa guarda(Pessoa pessoa) {

		EntityTransaction trx = manager.getTransaction();
		trx.begin();

		pessoa = manager.merge(pessoa);
		trx.commit();

		return pessoa;
	}

	public void remover(Agenda agenda) {
		agenda = porId(agenda.getId());
		manager.remove(pessoa);
	}

	@SuppressWarnings("unchecked")
	public List<Pessoa> filtrados(PessoaFilter filtro) {
		Session session = manager.unwrap(Session.class);
		@SuppressWarnings("deprecation")
		Criteria criteria = session.createCriteria(Pessoa.class);

		if (StringUtils.isNotBlank(filtro.getCpf())) {
			criteria.add(Restrictions.eq("cpf", filtro.getCpf()));
		}

		if (StringUtils.isNotBlank(filtro.getNome())) {
			criteria.add(Restrictions.ilike("nome", filtro.getNome(), MatchMode.ANYWHERE));
		}

		return criteria.addOrder(Order.asc("nome")).list();
	}
	
	

}
